package multiThreading;


public class SequenceNumbersWithWaitNotify {

	private static int count = 0;
	private static int t1turn = 1;
	private static final Object lock = new Object();
	/**
	 * @param args
	 */
	class Thread1 extends Thread{
		

		public void run(){
			System.out.println("thread1");
			synchronized(lock){
				while(t1turn==1){
				  incrementCount();
				  t1turn = 0;
				  lock.notifyAll();
				}
				
				while(t1turn==0){
				try {
					lock.wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			  }
			}
		}
	}
	
	class Thread2 extends Thread{
		public void run(){
			System.out.println("thread2");
			synchronized(lock){
				while(t1turn==0){
				incrementCount();
				t1turn = 1;
				lock.notifyAll();
				}
				while(t1turn==1){
					try {
						lock.wait();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
			}
		}
	}
	
	private static void incrementCount(){
		count++;
		System.out.println("incremented count by "+count+" by thread : "+Thread.currentThread().getName());
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		SequenceNumbersWithWaitNotify obj = new SequenceNumbersWithWaitNotify();
		SequenceNumbersWithWaitNotify.Thread1 t1 =  obj.new Thread1();
		SequenceNumbersWithWaitNotify.Thread2 t2 =  obj.new Thread2();
		t1.start();
		try {
			t1.sleep(200);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		t2.start();
		t1.join();
		t2.join();
	}

}
