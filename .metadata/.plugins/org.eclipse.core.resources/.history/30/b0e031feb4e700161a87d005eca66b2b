package multiThreading;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

class ThreadPool{
	private final BlockingQueue <Runnable> workerQueue;
	private final Thread[] workerThreads;
	private volatile boolean shutdown;
	
	public ThreadPool(int n){
		workerQueue = new LinkedBlockingQueue<>();
		workerThreads = new Thread[n];
		for(int i=0;i<n;i++){
			workerThreads[i]= new Worker("Pool Thread "+i);
			workerThreads[i].start();
		}
	}
	
	public void addTask(Runnable r){
		try{
			workerQueue.put(r);
		}catch(InterruptedException e){
			e.printStackTrace();
		}
	}
	
	public void shutdown(){
		while(!workerQueue.isEmpty()){
			try{
				Thread.sleep(1000);
			}catch(InterruptedException e){
				e.printStackTrace();
			}
		}
		shutdown = true;
		for(Thread workerThread: workerThreads){
			workerThread.interrupt();
		}
	}
	
	private class Worker extends Thread{
		public Worker(String name){
			super(name);
		}
		public void run(){
			while(!shutdown){
				try{
					Runnable r = workerQueue.take();
					r.run();
				}catch(InterruptedException e){
					e.printStackTrace();
				}
			}
		}
	}
}



public class ProduceConsumerWithThreadPool {
	private static AtomicInteger rnd = new AtomicInteger(0);
    private final BlockingQueue < Integer > queue;
    
	/**
	 * @param args
	 */
    public ProduceConsumerWithThreadPool(){
    	queue = new LinkedBlockingQueue<>(3);
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ProduceConsumerWithThreadPool pc = new ProduceConsumerWithThreadPool();
	}
	
	private class Producer implements Runnable{
		public void run(){
			Integer e = rnd.incrementAndGet();
			System.out.println("Inserting Element "+ e);
			try{
				queue.put(e);
				Thread.sleep(1000);
			}catch(InterruptedException e){
				
			}
		}
	}
	
	private class Consumer implements Runnable{
		public void run(){
			try{
			System.out.println("Removing Element "+queue.take());
			Thread.sleep(1000);
			}catch(InterruptedException e){
				e.printStackTrace();
			}
		}
	}

}
