package multiThreading;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

class Worker implements Runnable{
	BlockingQueue<Integer> q = new LinkedBlockingQueue<
			Integer>();
	Worker next = null;
	
	public void setNext(Worker t){
		next = t;
	}
	public void accept(int i){
		q.add(i);
	}
	public void run(){
		while(true){
			try{
				int i = q.take();
				System.out.println(Thread.currentThread().getName() + i);
	            Thread.sleep(1000);
	            if(next != null){
	            	next.accept(i+1);
	            }
			}catch(InterruptedException e){
				e.printStackTrace();
			}
		}
	}
}

public class SequenceNumbersWithAlternatingThreads {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Worker w1 = new Worker();
		Worker w2 = new Worker();
        w1.setNext(w2);
        w2.setNext(w1);
	}

}
